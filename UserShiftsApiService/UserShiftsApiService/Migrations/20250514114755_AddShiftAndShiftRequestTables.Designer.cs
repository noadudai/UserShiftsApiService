// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserShiftsApiService.Models;

#nullable disable

namespace UserShiftsApiService.Migrations
{
    [DbContext(typeof(ShiftsSchedulingContext))]
    [Migration("20250514114755_AddShiftAndShiftRequestTables")]
    partial class AddShiftAndShiftRequestTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserShiftsApiService.Entities.RequestedShiftEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ShiftId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserShiftsRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserShiftsRequestId");

                    b.ToTable("RequestedShift");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.ShiftEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShiftType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.UserDateRangePreferenceRequestEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDateRangeScheduleRequests");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthSub")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.UserShiftsPreferenceRequestEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ShiftRequestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserShiftPreferenceRequests");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.RequestedShiftEntity", b =>
                {
                    b.HasOne("UserShiftsApiService.Entities.ShiftEntity", "Shift")
                        .WithMany("UserRequestedShifts")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserShiftsApiService.Entities.UserShiftsPreferenceRequestEntity", "UserShiftsRequest")
                        .WithMany("RequestedShifts")
                        .HasForeignKey("UserShiftsRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("UserShiftsRequest");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.UserDateRangePreferenceRequestEntity", b =>
                {
                    b.HasOne("UserShiftsApiService.Entities.UserEntity", "User")
                        .WithMany("DateRangePreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.UserShiftsPreferenceRequestEntity", b =>
                {
                    b.HasOne("UserShiftsApiService.Entities.UserEntity", "User")
                        .WithMany("ShiftPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.ShiftEntity", b =>
                {
                    b.Navigation("UserRequestedShifts");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.UserEntity", b =>
                {
                    b.Navigation("DateRangePreferences");

                    b.Navigation("ShiftPreferences");
                });

            modelBuilder.Entity("UserShiftsApiService.Entities.UserShiftsPreferenceRequestEntity", b =>
                {
                    b.Navigation("RequestedShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
